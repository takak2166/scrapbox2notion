// Code generated by MockGen. DO NOT EDIT.
// Source: notionapi_interfaces.go

// Package mock_notion is a generated GoMock package.
package mock_notion

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	notionapi "github.com/jomei/notionapi"
)

// MockPageService is a mock of PageService interface.
type MockPageService struct {
	ctrl     *gomock.Controller
	recorder *MockPageServiceMockRecorder
}

// MockPageServiceMockRecorder is the mock recorder for MockPageService.
type MockPageServiceMockRecorder struct {
	mock *MockPageService
}

// NewMockPageService creates a new mock instance.
func NewMockPageService(ctrl *gomock.Controller) *MockPageService {
	mock := &MockPageService{ctrl: ctrl}
	mock.recorder = &MockPageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPageService) EXPECT() *MockPageServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPageService) Create(arg0 context.Context, arg1 *notionapi.PageCreateRequest) (*notionapi.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*notionapi.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPageServiceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPageService)(nil).Create), arg0, arg1)
}

// Get mocks base method.
func (m *MockPageService) Get(arg0 context.Context, arg1 notionapi.PageID) (*notionapi.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*notionapi.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPageServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPageService)(nil).Get), arg0, arg1)
}

// Update mocks base method.
func (m *MockPageService) Update(arg0 context.Context, arg1 notionapi.PageID, arg2 *notionapi.PageUpdateRequest) (*notionapi.Page, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*notionapi.Page)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPageServiceMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPageService)(nil).Update), arg0, arg1, arg2)
}

// MockSearchService is a mock of SearchService interface.
type MockSearchService struct {
	ctrl     *gomock.Controller
	recorder *MockSearchServiceMockRecorder
}

// MockSearchServiceMockRecorder is the mock recorder for MockSearchService.
type MockSearchServiceMockRecorder struct {
	mock *MockSearchService
}

// NewMockSearchService creates a new mock instance.
func NewMockSearchService(ctrl *gomock.Controller) *MockSearchService {
	mock := &MockSearchService{ctrl: ctrl}
	mock.recorder = &MockSearchServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchService) EXPECT() *MockSearchServiceMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockSearchService) Do(arg0 context.Context, arg1 *notionapi.SearchRequest) (*notionapi.SearchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1)
	ret0, _ := ret[0].(*notionapi.SearchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockSearchServiceMockRecorder) Do(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockSearchService)(nil).Do), arg0, arg1)
}

// MockBlockService is a mock of BlockService interface.
type MockBlockService struct {
	ctrl     *gomock.Controller
	recorder *MockBlockServiceMockRecorder
}

// MockBlockServiceMockRecorder is the mock recorder for MockBlockService.
type MockBlockServiceMockRecorder struct {
	mock *MockBlockService
}

// NewMockBlockService creates a new mock instance.
func NewMockBlockService(ctrl *gomock.Controller) *MockBlockService {
	mock := &MockBlockService{ctrl: ctrl}
	mock.recorder = &MockBlockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockService) EXPECT() *MockBlockServiceMockRecorder {
	return m.recorder
}

// AppendChildren mocks base method.
func (m *MockBlockService) AppendChildren(arg0 context.Context, arg1 notionapi.BlockID, arg2 *notionapi.AppendBlockChildrenRequest) (*notionapi.AppendBlockChildrenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendChildren", arg0, arg1, arg2)
	ret0, _ := ret[0].(*notionapi.AppendBlockChildrenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendChildren indicates an expected call of AppendChildren.
func (mr *MockBlockServiceMockRecorder) AppendChildren(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendChildren", reflect.TypeOf((*MockBlockService)(nil).AppendChildren), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockBlockService) Delete(arg0 context.Context, arg1 notionapi.BlockID) (notionapi.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(notionapi.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockBlockServiceMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBlockService)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockBlockService) Get(arg0 context.Context, arg1 notionapi.BlockID) (notionapi.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(notionapi.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBlockServiceMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBlockService)(nil).Get), arg0, arg1)
}

// GetChildren mocks base method.
func (m *MockBlockService) GetChildren(arg0 context.Context, arg1 notionapi.BlockID, arg2 *notionapi.Pagination) (*notionapi.GetChildrenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChildren", arg0, arg1, arg2)
	ret0, _ := ret[0].(*notionapi.GetChildrenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChildren indicates an expected call of GetChildren.
func (mr *MockBlockServiceMockRecorder) GetChildren(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChildren", reflect.TypeOf((*MockBlockService)(nil).GetChildren), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockBlockService) Update(ctx context.Context, id notionapi.BlockID, request *notionapi.BlockUpdateRequest) (notionapi.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, request)
	ret0, _ := ret[0].(notionapi.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBlockServiceMockRecorder) Update(ctx, id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBlockService)(nil).Update), ctx, id, request)
}
