// Code generated by MockGen. DO NOT EDIT.
// Source: internal/notion/notion.go

// Package mock_notion is a generated GoMock package.
package mock_notion

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	notionapi "github.com/jomei/notionapi"
)

// MockNotionClient is a mock of NotionClient interface.
type MockNotionClient struct {
	ctrl     *gomock.Controller
	recorder *MockNotionClientMockRecorder
}

// MockNotionClientMockRecorder is the mock recorder for MockNotionClient.
type MockNotionClientMockRecorder struct {
	mock *MockNotionClient
}

// NewMockNotionClient creates a new mock instance.
func NewMockNotionClient(ctrl *gomock.Controller) *MockNotionClient {
	mock := &MockNotionClient{ctrl: ctrl}
	mock.recorder = &MockNotionClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNotionClient) EXPECT() *MockNotionClientMockRecorder {
	return m.recorder
}

// Block mocks base method.
func (m *MockNotionClient) Block() notionapi.BlockService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Block")
	ret0, _ := ret[0].(notionapi.BlockService)
	return ret0
}

// Block indicates an expected call of Block.
func (mr *MockNotionClientMockRecorder) Block() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Block", reflect.TypeOf((*MockNotionClient)(nil).Block))
}

// Database mocks base method.
func (m *MockNotionClient) Database() notionapi.DatabaseService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Database")
	ret0, _ := ret[0].(notionapi.DatabaseService)
	return ret0
}

// Database indicates an expected call of Database.
func (mr *MockNotionClientMockRecorder) Database() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockNotionClient)(nil).Database))
}

// Page mocks base method.
func (m *MockNotionClient) Page() notionapi.PageService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Page")
	ret0, _ := ret[0].(notionapi.PageService)
	return ret0
}

// Page indicates an expected call of Page.
func (mr *MockNotionClientMockRecorder) Page() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Page", reflect.TypeOf((*MockNotionClient)(nil).Page))
}

// Search mocks base method.
func (m *MockNotionClient) Search() notionapi.SearchService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search")
	ret0, _ := ret[0].(notionapi.SearchService)
	return ret0
}

// Search indicates an expected call of Search.
func (mr *MockNotionClientMockRecorder) Search() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockNotionClient)(nil).Search))
}

// User mocks base method.
func (m *MockNotionClient) User() notionapi.UserService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(notionapi.UserService)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockNotionClientMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockNotionClient)(nil).User))
}
